// THIS FILE IS AUTOGENERATED BY axi_intercon_gen
// ANY MANUAL CHANGES WILL BE LOST
`default_nettype none
module axi_intercon
   (input  wire        clk_i,
    input  wire        rst_ni,
    input  wire  [2:0] i_ifu_arid,
    input  wire [31:0] i_ifu_araddr,
    input  wire  [7:0] i_ifu_arlen,
    input  wire  [2:0] i_ifu_arsize,
    input  wire  [1:0] i_ifu_arburst,
    input  wire        i_ifu_arlock,
    input  wire  [3:0] i_ifu_arcache,
    input  wire  [2:0] i_ifu_arprot,
    input  wire  [3:0] i_ifu_arregion,
    input  wire  [3:0] i_ifu_arqos,
    input  wire        i_ifu_arvalid,
    output wire        o_ifu_arready,
    output wire  [2:0] o_ifu_rid,
    output wire [63:0] o_ifu_rdata,
    output wire  [1:0] o_ifu_rresp,
    output wire        o_ifu_rlast,
    output wire        o_ifu_rvalid,
    input  wire        i_ifu_rready,
    input  wire  [3:0] i_lsu_awid,
    input  wire [31:0] i_lsu_awaddr,
    input  wire  [7:0] i_lsu_awlen,
    input  wire  [2:0] i_lsu_awsize,
    input  wire  [1:0] i_lsu_awburst,
    input  wire        i_lsu_awlock,
    input  wire  [3:0] i_lsu_awcache,
    input  wire  [2:0] i_lsu_awprot,
    input  wire  [3:0] i_lsu_awregion,
    input  wire  [3:0] i_lsu_awqos,
    input  wire        i_lsu_awvalid,
    output wire        o_lsu_awready,
    input  wire  [3:0] i_lsu_arid,
    input  wire [31:0] i_lsu_araddr,
    input  wire  [7:0] i_lsu_arlen,
    input  wire  [2:0] i_lsu_arsize,
    input  wire  [1:0] i_lsu_arburst,
    input  wire        i_lsu_arlock,
    input  wire  [3:0] i_lsu_arcache,
    input  wire  [2:0] i_lsu_arprot,
    input  wire  [3:0] i_lsu_arregion,
    input  wire  [3:0] i_lsu_arqos,
    input  wire        i_lsu_arvalid,
    output wire        o_lsu_arready,
    input  wire [63:0] i_lsu_wdata,
    input  wire  [7:0] i_lsu_wstrb,
    input  wire        i_lsu_wlast,
    input  wire        i_lsu_wvalid,
    output wire        o_lsu_wready,
    output wire  [3:0] o_lsu_bid,
    output wire  [1:0] o_lsu_bresp,
    output wire        o_lsu_bvalid,
    input  wire        i_lsu_bready,
    output wire  [3:0] o_lsu_rid,
    output wire [63:0] o_lsu_rdata,
    output wire  [1:0] o_lsu_rresp,
    output wire        o_lsu_rlast,
    output wire        o_lsu_rvalid,
    input  wire        i_lsu_rready,
    output wire  [4:0] o_rom_awid,
    output wire [31:0] o_rom_awaddr,
    output wire  [7:0] o_rom_awlen,
    output wire  [2:0] o_rom_awsize,
    output wire  [1:0] o_rom_awburst,
    output wire        o_rom_awlock,
    output wire  [3:0] o_rom_awcache,
    output wire  [2:0] o_rom_awprot,
    output wire  [3:0] o_rom_awregion,
    output wire  [3:0] o_rom_awqos,
    output wire        o_rom_awvalid,
    input  wire        i_rom_awready,
    output wire  [4:0] o_rom_arid,
    output wire [31:0] o_rom_araddr,
    output wire  [7:0] o_rom_arlen,
    output wire  [2:0] o_rom_arsize,
    output wire  [1:0] o_rom_arburst,
    output wire        o_rom_arlock,
    output wire  [3:0] o_rom_arcache,
    output wire  [2:0] o_rom_arprot,
    output wire  [3:0] o_rom_arregion,
    output wire  [3:0] o_rom_arqos,
    output wire        o_rom_arvalid,
    input  wire        i_rom_arready,
    output wire [63:0] o_rom_wdata,
    output wire  [7:0] o_rom_wstrb,
    output wire        o_rom_wlast,
    output wire        o_rom_wvalid,
    input  wire        i_rom_wready,
    input  wire  [4:0] i_rom_bid,
    input  wire  [1:0] i_rom_bresp,
    input  wire        i_rom_bvalid,
    output wire        o_rom_bready,
    input  wire  [4:0] i_rom_rid,
    input  wire [63:0] i_rom_rdata,
    input  wire  [1:0] i_rom_rresp,
    input  wire        i_rom_rlast,
    input  wire        i_rom_rvalid,
    output wire        o_rom_rready,
    output wire  [4:0] o_uart_awid,
    output wire [31:0] o_uart_awaddr,
    output wire  [7:0] o_uart_awlen,
    output wire  [2:0] o_uart_awsize,
    output wire  [1:0] o_uart_awburst,
    output wire        o_uart_awlock,
    output wire  [3:0] o_uart_awcache,
    output wire  [2:0] o_uart_awprot,
    output wire  [3:0] o_uart_awregion,
    output wire  [3:0] o_uart_awqos,
    output wire        o_uart_awvalid,
    input  wire        i_uart_awready,
    output wire  [4:0] o_uart_arid,
    output wire [31:0] o_uart_araddr,
    output wire  [7:0] o_uart_arlen,
    output wire  [2:0] o_uart_arsize,
    output wire  [1:0] o_uart_arburst,
    output wire        o_uart_arlock,
    output wire  [3:0] o_uart_arcache,
    output wire  [2:0] o_uart_arprot,
    output wire  [3:0] o_uart_arregion,
    output wire  [3:0] o_uart_arqos,
    output wire        o_uart_arvalid,
    input  wire        i_uart_arready,
    output wire [63:0] o_uart_wdata,
    output wire  [7:0] o_uart_wstrb,
    output wire        o_uart_wlast,
    output wire        o_uart_wvalid,
    input  wire        i_uart_wready,
    input  wire  [4:0] i_uart_bid,
    input  wire  [1:0] i_uart_bresp,
    input  wire        i_uart_bvalid,
    output wire        o_uart_bready,
    input  wire  [4:0] i_uart_rid,
    input  wire [63:0] i_uart_rdata,
    input  wire  [1:0] i_uart_rresp,
    input  wire        i_uart_rlast,
    input  wire        i_uart_rvalid,
    output wire        o_uart_rready,
    output wire  [4:0] o_ram_awid,
    output wire [31:0] o_ram_awaddr,
    output wire  [7:0] o_ram_awlen,
    output wire  [2:0] o_ram_awsize,
    output wire  [1:0] o_ram_awburst,
    output wire        o_ram_awlock,
    output wire  [3:0] o_ram_awcache,
    output wire  [2:0] o_ram_awprot,
    output wire  [3:0] o_ram_awregion,
    output wire  [3:0] o_ram_awqos,
    output wire        o_ram_awvalid,
    input  wire        i_ram_awready,
    output wire  [4:0] o_ram_arid,
    output wire [31:0] o_ram_araddr,
    output wire  [7:0] o_ram_arlen,
    output wire  [2:0] o_ram_arsize,
    output wire  [1:0] o_ram_arburst,
    output wire        o_ram_arlock,
    output wire  [3:0] o_ram_arcache,
    output wire  [2:0] o_ram_arprot,
    output wire  [3:0] o_ram_arregion,
    output wire  [3:0] o_ram_arqos,
    output wire        o_ram_arvalid,
    input  wire        i_ram_arready,
    output wire [63:0] o_ram_wdata,
    output wire  [7:0] o_ram_wstrb,
    output wire        o_ram_wlast,
    output wire        o_ram_wvalid,
    input  wire        i_ram_wready,
    input  wire  [4:0] i_ram_bid,
    input  wire  [1:0] i_ram_bresp,
    input  wire        i_ram_bvalid,
    output wire        o_ram_bready,
    input  wire  [4:0] i_ram_rid,
    input  wire [63:0] i_ram_rdata,
    input  wire  [1:0] i_ram_rresp,
    input  wire        i_ram_rlast,
    input  wire        i_ram_rvalid,
    output wire        o_ram_rready);


  localparam int unsigned NoMasters   = 32'd2;    // How many Axi Masters there are
  localparam int unsigned NoSlaves    = 32'd3;    // How many Axi Slaves  there are

  // axi configuration
  localparam int unsigned AxiIdWidthMasters =  32'd4;
  localparam int unsigned AxiIdUsed         =  32'd4; // Has to be <= AxiIdWidthMasters
  localparam int unsigned AxiIdWidthSlaves  =  AxiIdWidthMasters + $clog2(NoMasters);
  localparam int unsigned AxiAddrWidth      =  32'd32;    // Axi Address Width
  localparam int unsigned AxiDataWidth      =  32'd64;    // Axi Data Width
  localparam int unsigned AxiStrbWidth      =  AxiDataWidth / 8;
  localparam int unsigned AxiUserWidth      =  1;
  localparam axi_pkg::xbar_cfg_t xbar_cfg = '{

    NoSlvPorts:         NoMasters,
    NoMstPorts:         NoSlaves,
    MaxMstTrans:        10,
    MaxSlvTrans:        6,
    FallThrough:        1'b0,
    LatencyMode:        axi_pkg::CUT_ALL_AX,
    AxiIdWidthSlvPorts: AxiIdWidthMasters,
    AxiIdUsedSlvPorts:  AxiIdUsed,
    UniqueIds:          1'b0,
    AxiAddrWidth:       AxiAddrWidth,
    AxiDataWidth:       AxiDataWidth,
    NoAddrRules:        NoSlaves
  };

  typedef logic [AxiIdWidthMasters-1:0] id_mst_t;
  typedef logic [AxiIdWidthSlaves-1:0]  id_slv_t;
  typedef logic [AxiAddrWidth-1:0]      addr_t;
  typedef axi_pkg::xbar_rule_32_t       rule_t; // Has to be the same width as axi addr
  typedef logic [AxiDataWidth-1:0]      data_t;
  typedef logic [AxiStrbWidth-1:0]      strb_t;
  typedef logic [AxiUserWidth-1:0]      user_t;

  `AXI_TYPEDEF_AW_CHAN_T(aw_chan_mst_t, addr_t, id_mst_t, user_t)
  `AXI_TYPEDEF_AW_CHAN_T(aw_chan_slv_t, addr_t, id_slv_t, user_t)
  `AXI_TYPEDEF_W_CHAN_T(w_chan_t, data_t, strb_t, user_t)
  `AXI_TYPEDEF_B_CHAN_T(b_chan_mst_t, id_mst_t, user_t)
  `AXI_TYPEDEF_B_CHAN_T(b_chan_slv_t, id_slv_t, user_t)

  `AXI_TYPEDEF_AR_CHAN_T(ar_chan_mst_t, addr_t, id_mst_t, user_t)
  `AXI_TYPEDEF_AR_CHAN_T(ar_chan_slv_t, addr_t, id_slv_t, user_t)
  `AXI_TYPEDEF_R_CHAN_T(r_chan_mst_t, data_t, id_mst_t, user_t)
  `AXI_TYPEDEF_R_CHAN_T(r_chan_slv_t, data_t, id_slv_t, user_t)

  `AXI_TYPEDEF_REQ_T(slv_req_t, aw_chan_mst_t, w_chan_t, ar_chan_mst_t)
  `AXI_TYPEDEF_RESP_T(slv_resp_t, b_chan_mst_t, r_chan_mst_t)
  `AXI_TYPEDEF_REQ_T(mst_req_t, aw_chan_slv_t, w_chan_t, ar_chan_slv_t)
  `AXI_TYPEDEF_RESP_T(mst_resp_t, b_chan_slv_t, r_chan_slv_t)

  localparam rule_t [2:0] AddrMap = '{
    '{idx: 32'd0, start_addr: 32'h80000000, end_addr: 32'h80ffffff},
    '{idx: 32'd1, start_addr: 32'h90000000, end_addr: 32'h900fffff},
    '{idx: 32'd2, start_addr: 32'h00000000, end_addr: 32'h07ffffff}};
   slv_req_t  [1:0] masters_req;
   slv_resp_t [1:0] masters_resp;
   mst_req_t  [2:0] slaves_req;
   mst_resp_t [2:0] slaves_resp;

   //Master ifu
   assign masters_req[0].aw.id = 4'd0;
   assign masters_req[0].aw.addr = 32'd0;
   assign masters_req[0].aw.len = 8'd0;
   assign masters_req[0].aw.size = 3'd0;
   assign masters_req[0].aw.burst = 2'd0;
   assign masters_req[0].aw.lock = 1'd0;
   assign masters_req[0].aw.cache = 4'd0;
   assign masters_req[0].aw.prot = 3'd0;
   assign masters_req[0].aw.region = 4'd0;
   assign masters_req[0].aw.qos = 4'd0;
   assign masters_req[0].aw.atop = 6'd0;
   assign masters_req[0].aw_valid = 1'd0;
   assign masters_req[0].ar.id = {1'd0,i_ifu_arid};
   assign masters_req[0].ar.addr = i_ifu_araddr;
   assign masters_req[0].ar.len = i_ifu_arlen;
   assign masters_req[0].ar.size = i_ifu_arsize;
   assign masters_req[0].ar.burst = i_ifu_arburst;
   assign masters_req[0].ar.lock = i_ifu_arlock;
   assign masters_req[0].ar.cache = i_ifu_arcache;
   assign masters_req[0].ar.prot = i_ifu_arprot;
   assign masters_req[0].ar.region = i_ifu_arregion;
   assign masters_req[0].ar.qos = i_ifu_arqos;
   assign masters_req[0].ar_valid = i_ifu_arvalid;
   assign o_ifu_arready = masters_resp[0].ar_ready;
   assign masters_req[0].w.data = 64'd0;
   assign masters_req[0].w.strb = 8'd0;
   assign masters_req[0].w.last = 1'd0;
   assign masters_req[0].w_valid = 1'd0;
   assign masters_req[0].b_ready = 1'd0;
   assign o_ifu_rid = masters_resp[0].r.id[2:0];
   assign o_ifu_rdata = masters_resp[0].r.data;
   assign o_ifu_rresp = masters_resp[0].r.resp;
   assign o_ifu_rlast = masters_resp[0].r.last;
   assign o_ifu_rvalid = masters_resp[0].r_valid;
   assign masters_req[0].r_ready = i_ifu_rready;

   //Master lsu
   assign masters_req[1].aw.id = i_lsu_awid;
   assign masters_req[1].aw.addr = i_lsu_awaddr;
   assign masters_req[1].aw.len = i_lsu_awlen;
   assign masters_req[1].aw.size = i_lsu_awsize;
   assign masters_req[1].aw.burst = i_lsu_awburst;
   assign masters_req[1].aw.lock = i_lsu_awlock;
   assign masters_req[1].aw.cache = i_lsu_awcache;
   assign masters_req[1].aw.prot = i_lsu_awprot;
   assign masters_req[1].aw.region = i_lsu_awregion;
   assign masters_req[1].aw.qos = i_lsu_awqos;
   assign masters_req[1].aw.atop = 6'd0;
   assign masters_req[1].aw_valid = i_lsu_awvalid;
   assign o_lsu_awready = masters_resp[1].aw_ready;
   assign masters_req[1].ar.id = i_lsu_arid;
   assign masters_req[1].ar.addr = i_lsu_araddr;
   assign masters_req[1].ar.len = i_lsu_arlen;
   assign masters_req[1].ar.size = i_lsu_arsize;
   assign masters_req[1].ar.burst = i_lsu_arburst;
   assign masters_req[1].ar.lock = i_lsu_arlock;
   assign masters_req[1].ar.cache = i_lsu_arcache;
   assign masters_req[1].ar.prot = i_lsu_arprot;
   assign masters_req[1].ar.region = i_lsu_arregion;
   assign masters_req[1].ar.qos = i_lsu_arqos;
   assign masters_req[1].ar_valid = i_lsu_arvalid;
   assign o_lsu_arready = masters_resp[1].ar_ready;
   assign masters_req[1].w.data = i_lsu_wdata;
   assign masters_req[1].w.strb = i_lsu_wstrb;
   assign masters_req[1].w.last = i_lsu_wlast;
   assign masters_req[1].w_valid = i_lsu_wvalid;
   assign o_lsu_wready = masters_resp[1].w_ready;
   assign o_lsu_bid = masters_resp[1].b.id;
   assign o_lsu_bresp = masters_resp[1].b.resp;
   assign o_lsu_bvalid = masters_resp[1].b_valid;
   assign masters_req[1].b_ready = i_lsu_bready;
   assign o_lsu_rid = masters_resp[1].r.id;
   assign o_lsu_rdata = masters_resp[1].r.data;
   assign o_lsu_rresp = masters_resp[1].r.resp;
   assign o_lsu_rlast = masters_resp[1].r.last;
   assign o_lsu_rvalid = masters_resp[1].r_valid;
   assign masters_req[1].r_ready = i_lsu_rready;

   //Slave rom
   assign o_rom_awid = slaves_req[0].aw.id;
   assign o_rom_awaddr = slaves_req[0].aw.addr;
   assign o_rom_awlen = slaves_req[0].aw.len;
   assign o_rom_awsize = slaves_req[0].aw.size;
   assign o_rom_awburst = slaves_req[0].aw.burst;
   assign o_rom_awlock = slaves_req[0].aw.lock;
   assign o_rom_awcache = slaves_req[0].aw.cache;
   assign o_rom_awprot = slaves_req[0].aw.prot;
   assign o_rom_awregion = slaves_req[0].aw.region;
   assign o_rom_awqos = slaves_req[0].aw.qos;
   assign o_rom_awvalid = slaves_req[0].aw_valid;
   assign slaves_resp[0].aw_ready = i_rom_awready;
   assign o_rom_arid = slaves_req[0].ar.id;
   assign o_rom_araddr = slaves_req[0].ar.addr;
   assign o_rom_arlen = slaves_req[0].ar.len;
   assign o_rom_arsize = slaves_req[0].ar.size;
   assign o_rom_arburst = slaves_req[0].ar.burst;
   assign o_rom_arlock = slaves_req[0].ar.lock;
   assign o_rom_arcache = slaves_req[0].ar.cache;
   assign o_rom_arprot = slaves_req[0].ar.prot;
   assign o_rom_arregion = slaves_req[0].ar.region;
   assign o_rom_arqos = slaves_req[0].ar.qos;
   assign o_rom_arvalid = slaves_req[0].ar_valid;
   assign slaves_resp[0].ar_ready = i_rom_arready;
   assign o_rom_wdata = slaves_req[0].w.data;
   assign o_rom_wstrb = slaves_req[0].w.strb;
   assign o_rom_wlast = slaves_req[0].w.last;
   assign o_rom_wvalid = slaves_req[0].w_valid;
   assign slaves_resp[0].w_ready = i_rom_wready;
   assign slaves_resp[0].b.id = i_rom_bid;
   assign slaves_resp[0].b.resp = i_rom_bresp;
   assign slaves_resp[0].b_valid = i_rom_bvalid;
   assign o_rom_bready = slaves_req[0].b_ready;
   assign slaves_resp[0].r.id = i_rom_rid;
   assign slaves_resp[0].r.data = i_rom_rdata;
   assign slaves_resp[0].r.resp = i_rom_rresp;
   assign slaves_resp[0].r.last = i_rom_rlast;
   assign slaves_resp[0].r_valid = i_rom_rvalid;
   assign o_rom_rready = slaves_req[0].r_ready;

   //Slave uart
   assign o_uart_awid = slaves_req[1].aw.id;
   assign o_uart_awaddr = slaves_req[1].aw.addr;
   assign o_uart_awlen = slaves_req[1].aw.len;
   assign o_uart_awsize = slaves_req[1].aw.size;
   assign o_uart_awburst = slaves_req[1].aw.burst;
   assign o_uart_awlock = slaves_req[1].aw.lock;
   assign o_uart_awcache = slaves_req[1].aw.cache;
   assign o_uart_awprot = slaves_req[1].aw.prot;
   assign o_uart_awregion = slaves_req[1].aw.region;
   assign o_uart_awqos = slaves_req[1].aw.qos;
   assign o_uart_awvalid = slaves_req[1].aw_valid;
   assign slaves_resp[1].aw_ready = i_uart_awready;
   assign o_uart_arid = slaves_req[1].ar.id;
   assign o_uart_araddr = slaves_req[1].ar.addr;
   assign o_uart_arlen = slaves_req[1].ar.len;
   assign o_uart_arsize = slaves_req[1].ar.size;
   assign o_uart_arburst = slaves_req[1].ar.burst;
   assign o_uart_arlock = slaves_req[1].ar.lock;
   assign o_uart_arcache = slaves_req[1].ar.cache;
   assign o_uart_arprot = slaves_req[1].ar.prot;
   assign o_uart_arregion = slaves_req[1].ar.region;
   assign o_uart_arqos = slaves_req[1].ar.qos;
   assign o_uart_arvalid = slaves_req[1].ar_valid;
   assign slaves_resp[1].ar_ready = i_uart_arready;
   assign o_uart_wdata = slaves_req[1].w.data;
   assign o_uart_wstrb = slaves_req[1].w.strb;
   assign o_uart_wlast = slaves_req[1].w.last;
   assign o_uart_wvalid = slaves_req[1].w_valid;
   assign slaves_resp[1].w_ready = i_uart_wready;
   assign slaves_resp[1].b.id = i_uart_bid;
   assign slaves_resp[1].b.resp = i_uart_bresp;
   assign slaves_resp[1].b_valid = i_uart_bvalid;
   assign o_uart_bready = slaves_req[1].b_ready;
   assign slaves_resp[1].r.id = i_uart_rid;
   assign slaves_resp[1].r.data = i_uart_rdata;
   assign slaves_resp[1].r.resp = i_uart_rresp;
   assign slaves_resp[1].r.last = i_uart_rlast;
   assign slaves_resp[1].r_valid = i_uart_rvalid;
   assign o_uart_rready = slaves_req[1].r_ready;

   //Slave ram
   assign o_ram_awid = slaves_req[2].aw.id;
   assign o_ram_awaddr = slaves_req[2].aw.addr;
   assign o_ram_awlen = slaves_req[2].aw.len;
   assign o_ram_awsize = slaves_req[2].aw.size;
   assign o_ram_awburst = slaves_req[2].aw.burst;
   assign o_ram_awlock = slaves_req[2].aw.lock;
   assign o_ram_awcache = slaves_req[2].aw.cache;
   assign o_ram_awprot = slaves_req[2].aw.prot;
   assign o_ram_awregion = slaves_req[2].aw.region;
   assign o_ram_awqos = slaves_req[2].aw.qos;
   assign o_ram_awvalid = slaves_req[2].aw_valid;
   assign slaves_resp[2].aw_ready = i_ram_awready;
   assign o_ram_arid = slaves_req[2].ar.id;
   assign o_ram_araddr = slaves_req[2].ar.addr;
   assign o_ram_arlen = slaves_req[2].ar.len;
   assign o_ram_arsize = slaves_req[2].ar.size;
   assign o_ram_arburst = slaves_req[2].ar.burst;
   assign o_ram_arlock = slaves_req[2].ar.lock;
   assign o_ram_arcache = slaves_req[2].ar.cache;
   assign o_ram_arprot = slaves_req[2].ar.prot;
   assign o_ram_arregion = slaves_req[2].ar.region;
   assign o_ram_arqos = slaves_req[2].ar.qos;
   assign o_ram_arvalid = slaves_req[2].ar_valid;
   assign slaves_resp[2].ar_ready = i_ram_arready;
   assign o_ram_wdata = slaves_req[2].w.data;
   assign o_ram_wstrb = slaves_req[2].w.strb;
   assign o_ram_wlast = slaves_req[2].w.last;
   assign o_ram_wvalid = slaves_req[2].w_valid;
   assign slaves_resp[2].w_ready = i_ram_wready;
   assign slaves_resp[2].b.id = i_ram_bid;
   assign slaves_resp[2].b.resp = i_ram_bresp;
   assign slaves_resp[2].b_valid = i_ram_bvalid;
   assign o_ram_bready = slaves_req[2].b_ready;
   assign slaves_resp[2].r.id = i_ram_rid;
   assign slaves_resp[2].r.data = i_ram_rdata;
   assign slaves_resp[2].r.resp = i_ram_rresp;
   assign slaves_resp[2].r.last = i_ram_rlast;
   assign slaves_resp[2].r_valid = i_ram_rvalid;
   assign o_ram_rready = slaves_req[2].r_ready;


axi_xbar
  #(.Cfg           (xbar_cfg),
    .ATOPs         (1'b0),
    .slv_aw_chan_t (aw_chan_mst_t),
    .mst_aw_chan_t (aw_chan_slv_t),
    .w_chan_t      (w_chan_t),
    .slv_b_chan_t  (b_chan_mst_t),
    .mst_b_chan_t  (b_chan_slv_t),
    .slv_ar_chan_t (ar_chan_mst_t),
    .mst_ar_chan_t (ar_chan_slv_t),
    .slv_r_chan_t  (r_chan_mst_t),
    .mst_r_chan_t  (r_chan_slv_t),
    .slv_req_t     (slv_req_t),
    .slv_resp_t    (slv_resp_t),
    .mst_req_t     (mst_req_t),
    .mst_resp_t    (mst_resp_t),
    .rule_t        (rule_t))
 axi_xbar
   (.clk_i                 (clk_i),
    .rst_ni                (rst_ni),
    .test_i                (1'b0),
    .slv_ports_req_i       (masters_req),
    .slv_ports_resp_o      (masters_resp),
    .mst_ports_req_o       (slaves_req),
    .mst_ports_resp_i      (slaves_resp),
    .addr_map_i            (AddrMap),
    .en_default_mst_port_i (2'd0),
    .default_mst_port_i    ('0));

endmodule
